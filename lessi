#!/usr/bin/env python3

from colorsys import rgb_to_hls
from PIL import Image, ImageOps, ImageFilter
from sys import exit
import argparse
from os.path import isfile
from re import split

class lessi:
    """
    Reduce an image colors to specified palette and convert to GIF
    """

    def __new__(self, hex_colors, image_src, mode_filter_size=None, sort_palette=False):
        self.colors = []
        tmp_colors = []
        grayscale_colors = []
        new_palette = []


        for c in hex_colors:
            r, g, b = self.hex2rgb(self, c)
            tmp_colors.append({
                'hex': c,
                'rgb': (r, g ,b),
                'hls': rgb_to_hls(r, g, b),
            })

        # Sort colors by V value of HSV to arrange them from from dark to light
        if sort_palette:
            for c in sorted(tmp_colors, key=lambda x: x['hls'][1], reverse=True):
                self.colors.append(c)
        else:
            self.colors = tmp_colors

        try:
            img = Image.open(image_src)
        except Exception as e:
            raise Exception('Unable to open image: ' + image_src + ': ' + e)

        try:
            img_gs = ImageOps.grayscale(img)
        except Exception as e:
            raise Exception('Unable to convert image to grayscale: ' + image_src + ': ' + e)


        # Reduce palette to number of color argument
        try:
            img_reduced = img_gs.convert('P', palette=Image.ADAPTIVE, colors=len(hex_colors))
        except Exception as e:
            raise Exception('Unable to reduce palette: ' + image_src + ': ' + e)


        # For each supplied color match to corresponding grayscale color
        grayscale_colors = img_reduced.getpalette()[:len(hex_colors) * 3]
        colors_index = 0
        for i in range(0, len(hex_colors) * 3, 3):
            #self.colors[colors_index]['grayscale_hex'] = '%02x%02x%02x' % (grayscale_colors[i], grayscale_colors[i+1], grayscale_colors[i+2])
            self.colors[colors_index]['grayscale_rgb'] = (grayscale_colors[i], grayscale_colors[i+1], grayscale_colors[i+2])
            colors_index += 1

        gs_palette = img_reduced.getpalette()

        # Replace image grayscale colors with supplied palette
        for n in range(0, len(self.colors) * 3, 3):
            for i in range(0, len(self.colors)):
                if gs_palette[n] == self.colors[i]['grayscale_rgb'][0] and gs_palette[n+1] == self.colors[i]['grayscale_rgb'][1] and gs_palette[n+2] == self.colors[i]['grayscale_rgb'][2]:
                    new_palette.append(self.colors[i]['rgb'][0])
                    new_palette.append(self.colors[i]['rgb'][1])
                    new_palette.append(self.colors[i]['rgb'][2])
                    break

        new_palette = new_palette + gs_palette[len(new_palette):]

        img_reduced.putpalette(new_palette)

        if mode_filter_size == None:
            w, h = img_reduced.size
            mode_filter_size = int(w * h * 0.00001)

        img_filtered = img_reduced.filter(ImageFilter.ModeFilter(size=mode_filter_size))

        return img_filtered


    def hex2rgb(self, hex_color):

        # Remove the '#' character if present
        hex_color = hex_color.lstrip('#')

        # Convert hex to RGB
        r, g, b = [int(hex_color[i:i+2], 16) for i in (0, 2, 4)]

        return (r, g, b)


if __name__ == "__main__":

    p = argparse.ArgumentParser()

    p.add_argument('--mode-filter-size', '-m', action='store', type=int, help='Replace the pixel value with the median value of all pixels within the given size')
    p.add_argument('--hex-palette', '-p', action='store', type=str, help='Hex color codes separated by space, comma or dash', required=True)
    p.add_argument('--output', '-o', action='store', type=str, help='Output file path', required=True)
    p.add_argument('--sort-palette', '-s', action='store_true', help='Sort palette dark to light')
    p.add_argument('file', nargs=argparse.PARSER)
    a = p.parse_args()

    hex_colors = split('\W+', a.hex_palette)

    try:
        l = lessi(hex_colors, a.file[0], mode_filter_size=a.mode_filter_size, sort_palette=a.sort_palette)
    except Exception as e:
        print('Image processing failed: ' + str(e))
        exit(1)

    if not a.output.lower().endswith('.gif'):
        print('Output must be a .gif')
        exit(1)

    try:
        l.save(a.output, comment='https://github.com/oliverfields/lessi')
    except Exception as e:
        print('Unable to save: ' + a.output + ': ' + e)
        exit(1)

    exit(0)

